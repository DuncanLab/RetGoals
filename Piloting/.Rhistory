knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data <- read.csv('/Users/matthewdougherty/Desktop/Projects/RetGoals_Git/Piloting/RetGoals_PilotData.csv')
View(data)
data$plot_corr <- data$corr
data$plot_corr[data$task == 'Encoding'] <- data$encret_corr
data$plot_corr <- data$corr
data$plot_corr[data$task == 'Encoding'] <- data$encret_corr[data$task == 'Encoding']
View(data)
trial_perf <-
test_data %>%
group_by(task, trial_num) %>%
summarize(performance = mean(plot_corr)) %>%
ungroup()
trial_perf <-
data %>%
group_by(task, trial_num) %>%
summarize(performance = mean(plot_corr)) %>%
ungroup()
ggplot(trial_perf, aes(x=trial_num, y = performance, color = task)) + geom_line()
trial_perf <-
data %>%
subset(task %in% c('Encoding', 'Retrieval')) %>%
group_by(task, trial_num) %>%
summarize(performance = mean(plot_corr)) %>%
ungroup()
ggplot(trial_perf, aes(x=trial_num, y = performance, color = task)) + geom_line()
trial_perf <-
data %>%
subset(task %in% c('Encoding', 'Retrieval') & block_type == 10) %>%
group_by(task, trial_num) %>%
summarize(performance = mean(plot_corr)) %>%
ungroup()
ggplot(trial_perf, aes(x=trial_num, y = performance, color = task)) + geom_line()
trial_perf <-
data %>%
subset(task %in% c('Internal', 'External') & block_type == 10) %>%
group_by(task, trial_num) %>%
summarize(performance = mean(plot_corr)) %>%
ungroup()
ggplot(trial_perf, aes(x=trial_num, y = performance, color = task)) + geom_line()
trial_perf <-
data %>%
subset(task %in% c('Encoding', 'Retrieval') & trial_num <16) %>%
group_by(task, trial_num) %>%
summarize(performance = mean(plot_corr)) %>%
ungroup()
ggplot(trial_perf, aes(x=trial_num, y = performance, color = task)) + geom_line()
knitr::opts_chunk$set(echo = TRUE)
#Start off with loading the tidyverse library. Make sure it is installed first
library(tidyverse)
#Read in the csv as a dataframe named "events". Change the filepath to wherever you placed the downloaded csv file
events <- read.csv('/Users/matthewdougherty/Desktop/Projects/RetGoals_Git/Piloting/RetGoals_PilotData.csv')
summary_stats <-
events %>%
group_by(task) %>%
summarize(performance = mean(corr)) %>%
ungroup()
View(summary_stats)
summary_stats <-
events %>%
group_by(participant, task, block_type) %>%
summarize(performance = mean(corr)) %>%
ungroup()
View(summary_stats)
#Take a look at the dataframe created by the above code. It would be easier to visualize the performance if each task was its own column, rather than its own row. To do this, use the pivot_wider function
summary_stats <- pivot_wider(summary_stats, names_from = task, values_from = performance)
View(summary_stats)
summary_stats <-
events %>%
group_by(task, block_type) %>%
summarize(performance = mean(corr)) %>%
ungroup()
View(summary_stats)
summary_stats <-
events %>%
group_by(participant, task) %>%
summarize(rt = mean(rt)) %>%
ungroup()
#Take a look at the dataframe created by the above code. It would be easier to visualize the performance if each task was its own column, rather than its own row. To do this, use the pivot_wider function
summary_stats <- pivot_wider(summary_stats, names_from = task, values_from = performance)
#Take a look at the dataframe created by the above code. It would be easier to visualize the performance if each task was its own column, rather than its own row. To do this, use the pivot_wider function
summary_stats <- pivot_wider(summary_stats, names_from = task, values_from = rt)
summary_stats <-
events %>%
group_by(participant, task) %>%
summarize(rt = mean(rt), na.rm=TRUE) %>%
ungroup()
#Take a look at the dataframe created by the above code. It would be easier to visualize the performance if each task was its own column, rather than its own row. To do this, use the pivot_wider function
summary_stats <- pivot_wider(summary_stats, names_from = task, values_from = rt)
View(summary_stats)
View(summary_stats)
summary_stats <-
events %>%
group_by(participant, task) %>%
summarize(rt = mean(rt, na.rm = T)) %>%
ungroup()
#Take a look at the dataframe created by the above code. It would be easier to visualize the performance if each task was its own column, rather than its own row. To do this, use the pivot_wider function
summary_stats <- pivot_wider(summary_stats, names_from = task, values_from = rt)
View(summary_stats)
summary_stats <-
events %>%
group_by(task) %>%
summarize(rt = mean(rt, na.rm = T)) %>%
ungroup()
#Take a look at the dataframe created by the above code. It would be easier to visualize the performance if each task was its own column, rather than its own row. To do this, use the pivot_wider function
summary_stats <- pivot_wider(summary_stats, names_from = task, values_from = rt)
View(summary_stats)
summary_stats <-
events %>%
group_by(task) %>%
summarize(rt = mean(rt, na.rm = T)) %>%
ungroup()
View(summary_stats)
View(events)
trial_perf_10 <-
events %>%
subset(block_type == 10) %>%
group_by(task, trial_num) %>%
summarize(performance = mean(corr)) %>%
ungroup()
ggplot(trial_perf_10, aes(x=trial_num, y = performance, color = task)) + geom_line()
View(trial_perf_10)
events$plot_corr <- 0
View(events)
events$plot_corr <- events$corr
View(events)
events$plot_corr[events$task == 'Encoding'] <- events$encret_corr
View(events)
events$plot_corr[events$task == 'Encoding'] <- events$encret_corr[events$task == 'Encoding']
View(events)
events$plot_corr[events$task == 'Encoding'] <- events$encret_corr
events$plot_corr[events$task == 'Encoding'] <- events$encret_corr[events$task == 'Encoding']
events$plot_corr[events$task != 'Encoding'] <- events$corr
events$plot_corr <- events$corr
events$plot_corr[events$task == 'Encoding'] <- events$encret_corr[events$task == 'Encoding']
trial_perf_10 <-
events %>%
subset(block_type == 10) %>%
group_by(task, trial_num) %>%
summarize(performance = mean(plot_corr)) %>%
ungroup()
ggplot(trial_perf_10, aes(x=trial_num, y = performance, color = task)) + geom_line()
#Start off with loading the tidyverse library. Make sure it is installed first
library(tidyverse)
#Read in the csv as a dataframe named "events". Change the filepath to wherever you placed the downloaded csv file
events <- read.csv('/Users/matthewdougherty/Desktop/Projects/RetGoals_Git/Piloting/RetGoals_PilotData.csv')
summary_stats <-
events %>%
group_by(task) %>%
summarize(rt = mean(rt, na.rm = T)) %>%
ungroup()
#Take a look at the dataframe created by the above code. It would be easier to visualize the performance if each task was its own column, rather than its own row. To do this, use the pivot_wider function
summary_stats <- pivot_wider(summary_stats, names_from = task, values_from = rt)
View(summary_stats)
summary_stats <-
events %>%
group_by(participant, task) %>%
summarize(rt = mean(rt, na.rm = T)) %>%
ungroup()
#Take a look at the dataframe created by the above code. It would be easier to visualize the performance if each task was its own column, rather than its own row. To do this, use the pivot_wider function
summary_stats <- pivot_wider(summary_stats, names_from = task, values_from = rt)
summary_stats <-
events %>%
group_by(task) %>%
summarize(rt = mean(rt, na.rm = T)) %>%
ungroup()
#Take a look at the dataframe created by the above code. It would be easier to visualize the performance if each task was its own column, rather than its own row. To do this, use the pivot_wider function
summary_stats <- pivot_wider(summary_stats, names_from = task, values_from = rt)
View(summary_stats)
#Start off with loading the tidyverse library. Make sure it is installed first
library(tidyverse)
#Read in the csv as a dataframe named "events". Change the filepath to wherever you placed the downloaded csv file
events <- read.csv('/Users/matthewdougherty/Desktop/Projects/RetGoals_Git/Piloting/RetGoals_PilotData.csv')
summary_stats <-
events %>%
group_by(task) %>%
summarize(rt = mean(rt, na.rm = T)) %>%
ungroup()
#Take a look at the dataframe created by the above code. It would be easier to visualize the performance if each task was its own column, rather than its own row. To do this, use the pivot_wider function
summary_stats <- pivot_wider(summary_stats, names_from = task, values_from = rt)
View(summary_stats)
summary_stats <-
events %>%
group_by(participant, task) %>%
summarize(rt = mean(rt, na.rm = T)) %>%
ungroup()
#Take a look at the dataframe created by the above code. It would be easier to visualize the performance if each task was its own column, rather than its own row. To do this, use the pivot_wider function
summary_stats <- pivot_wider(summary_stats, names_from = task, values_from = rt)
summary_stats <-
events %>%
group_by(participant, task) %>%
summarize(performance = mean(corr))) %>%
summary_stats <-
events %>%
group_by(participant, task) %>%
summarize(performance = mean(corr)) %>%
ungroup()
#Take a look at the dataframe created by the above code. It would be easier to visualize the performance if each task was its own column, rather than its own row. To do this, use the pivot_wider function
summary_stats <- pivot_wider(summary_stats, names_from = task, values_from = performance)
View(summary_stats)
View(summary_stats)
summary_stats <-
events %>%
group_by(task) %>%
summarize(performance = mean(corr)) %>%
ungroup()
#Take a look at the dataframe created by the above code. It would be easier to visualize the performance if each task was its own column, rather than its own row. To do this, use the pivot_wider function
summary_stats <- pivot_wider(summary_stats, names_from = task, values_from = performance)
View(summary_stats)
trial_perf_10 <-
events %>%
group_by(task, trial_num) %>%
summarize(performance = mean(plot_corr)) %>%
ungroup()
trial_perf_10 <-
events %>%
subset(block_type == 10) %>%
group_by(task, trial_num) %>%
summarize(performance = mean(plot_corr)) %>%
ungroup()
#Start off with loading the tidyverse library. Make sure it is installed first
library(tidyverse)
#Read in the csv as a dataframe named "events". Change the filepath to wherever you placed the downloaded csv file
events <- read.csv('/Users/matthewdougherty/Desktop/Projects/RetGoals_Git/Piloting/RetGoals_PilotData.csv')
trial_perf_10 <-
events %>%
subset(block_type == 40) %>%
group_by(task, trial_num) %>%
summarize(performance = mean(corr)) %>%
ungroup()
ggplot(trial_perf_10, aes(x=trial_num, y = performance, color = task)) + geom_line()
trial_perf_10 <-
events %>%
subset(trial_num<11) %>%
group_by(task, trial_num) %>%
summarize(performance = mean(corr)) %>%
ungroup()
ggplot(trial_perf_10, aes(x=trial_num, y = performance, color = task)) + geom_line()
events$plot_corr <- events$corr
events$plot_corr[events$task == 'Encoding'] <- events$encret_corr[events$task == 'Encoding']
trial_perf_10 <-
events %>%
subset(trial_num<11) %>%
group_by(task, trial_num) %>%
summarize(performance = mean(perf_corr)) %>%
ungroup()
trial_perf_10 <-
events %>%
subset(trial_num<11) %>%
group_by(task, trial_num) %>%
summarize(performance = mean(plot_corr)) %>%
ungroup()
ggplot(trial_perf_10, aes(x=trial_num, y = performance, color = task)) + geom_line()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
enc_evs <- read.csv('/Users/matthewdougherty/Desktop/Projects/RetGoals_Git/Alan_PrelimAnalyses/all_enc_matt.csv')
ret_evs <- read.csv('/Users/matthewdougherty/Desktop/Projects/RetGoals_Git/Alan_PrelimAnalyses/all_ret_matt.csv')
unique(ret_evs$subject)
ggplot(trial_perf_10, aes(x=trial_num, y = performance, color = task)) + geom_line() + stat_smooth()
#Start off with loading the tidyverse library. Make sure it is installed first
library(tidyverse)
#Read in the csv as a dataframe named "events". Change the filepath to wherever you placed the downloaded csv file
events <- read.csv('/Users/matthewdougherty/Desktop/Projects/RetGoals_Git/Piloting/RetGoals_PilotData.csv')
trial_perf_10 <-
events %>%
subset(trial_num<11) %>%
group_by(task, trial_num) %>%
summarize(performance = mean(plot_corr)) %>%
ungroup()
events$plot_corr <- events$corr
events$plot_corr[events$task == 'Encoding'] <- events$encret_corr[events$task == 'Encoding']
trial_perf_10 <-
events %>%
subset(trial_num<11) %>%
group_by(task, trial_num) %>%
summarize(performance = mean(plot_corr)) %>%
ungroup()
ggplot(trial_perf_10, aes(x=trial_num, y = performance, color = task)) + geom_line() + stat_smooth()
library(tidyverse)
enc_evs <- read.csv('/Users/matthewdougherty/Desktop/Projects/RetGoals_Git/Alan_PrelimAnalyses/all_enc_matt.csv')
ret_evs <- read.csv('/Users/matthewdougherty/Desktop/Projects/RetGoals_Git/Alan_PrelimAnalyses/all_ret_matt.csv')
enc_evs$include <- 0
enc_evs$include[enc_evs$BvsPI_condition == 'First_pres'] <- 1
enc_evs$include[enc_evs$BvsPI_condition == 'First_pres_restudy'] <- 1
ret_evs$include <- 0
ret_evs$include[ret_evs$BvsPI_condition == 'First_pres'] <- 1
ret_evs$include[ret_evs$BvsPI_condition == 'First_pres_restudy'] <- 1
enc_evs <- subset(enc_evs, include == 1)
ret_evs <- subset(ret_evs, include == 1)
enc_evs <- separate(enc_evs, blockcode, c('blockcode', 'true_block'), sep = 6)
ret_evs <- separate(ret_evs, blockcode, c('blockcode', 'true_block'), sep = 6)
enc_evs$enc_trialnum <- enc_evs$trialnum
ret_evs$ret_trialnum <- ret_evs$trialnum
ret_evs <- subset(ret_evs, select = c('subject', 'true_block', 'ret_trialnum', 'stim_name',
'memory_ans', 'latency', 'Adjusted_SOA',
'memory_test_result', 'task', 'swst'))
enc_evs <- subset(enc_evs, select = c('subject', 'true_block', 'enc_trialnum', 'stim_name'))
ret_evs <- merge(ret_evs, enc_evs, by = c('subject', 'true_block', 'stim_name'), all=T)
enc_plot_data <-
ret_evs %>%
group_by(true_block, enc_trialnum) %>%
summarise(enc_perf = mean(memory_test_result)) %>%
ungroup()
enc_plot_data$trialnum <- enc_plot_data$enc_trialnum
ret_plot_data <-
ret_evs %>%
group_by(true_block, ret_trialnum) %>%
summarise(ret_perf = mean(memory_test_result)) %>%
ungroup()
ret_plot_data$trialnum <- ret_plot_data$ret_trialnum
plot_data <- merge(ret_plot_data, enc_plot_data, by = c('true_block', 'trialnum'), all = T)
plot_test <- pivot_longer(plot_data, cols = c('enc_perf', 'ret_perf'), names_to = 'task')
ggplot(plot_test, aes(x = trialnum, y = value, color = task)) + geom_line() + stat_smooth()
ggplot(plot_test, aes(x = trialnum, y = value, color = task)) + stat_smooth()
View(ret_evs)
evs_long <- pivot_longer(ret_evs, cols = c('enc_trialnum', 'ret_trialnum'), names_to = 'trial_num')
View(evs_long)
ggplot(plot_test, aes(x = value, y = memory_test_result, color = trial_num)) + stat_smooth()
ggplot(evs_long, aes(x = value, y = memory_test_result, color = trial_num)) + stat_smooth()
trial_perf_10 <-
events %>%
group_by(task, trial_num) %>%
summarize(performance = mean(plot_corr)) %>%
ungroup()
ggplot(trial_perf_10, aes(x=trial_num, y = performance, color = task)) + geom_line() + stat_smooth()
ggplot(trial_perf_10, aes(x=trial_num, y = performance, color = task)) + stat_smooth()
ggplot(trial_perf_10, aes(x=trial_num, y = performance, color = task)) + geom_line()
ggplot(trial_perf_10, aes(x=trial_num, y = performance, color = task)) + stat_smooth()
trial_perf_10 <-
events %>%
subset(block_type == 40) %>%
group_by(task, trial_num) %>%
summarize(performance = mean(plot_corr)) %>%
ungroup()
ggplot(trial_perf_10, aes(x=trial_num, y = performance, color = task)) + stat_smooth()
ggplot(trial_perf_10, aes(x=trial_num, y = performance, color = task)) + geom_line()
ggplot(trial_perf_10, aes(x=trial_num, y = performance, color = task)) + stat_smooth()
View(ret_evs)
ret_evs$Retrieval <- ret_evs$ret_trialnum
ret_evs$Encoding <- ret_evs$enc_trialnum
evs_long <- pivot_longer(ret_evs, cols = c('Encoding', 'Retrieval'), names_to = 'Task')
ret_evs$Retrieval <- ret_evs$ret_trialnum
ret_evs$Encoding <- ret_evs$enc_trialnum
ret_evs$Accuracy <- ret_evs$memory_test_result
evs_long <- pivot_longer(ret_evs, cols = c('Encoding', 'Retrieval'), names_to = 'Task')
View(evs_long)
evs_long$Trial <- evs_long$value
ggplot(evs_long, aes(x = Trial, y = Accuracy, color = Task)) + stat_smooth()
ggplot(evs_long, aes(x = Trial, y = Accuracy, color = Task)) + stat_smooth() + theme(text = element_text(size = 20))
ggplot(evs_long, aes(x = Trial, y = Accuracy, color = Task)) + stat_smooth() + theme(text = element_text(size = 16))
knitr::opts_chunk$set(echo = TRUE)
#Start off with loading the tidyverse library. Make sure it is installed first
library(tidyverse)
#Read in the csv as a dataframe named "events". Change the filepath to wherever you placed the downloaded csv file
events <- read.csv('/Users/matthewdougherty/Desktop/Projects/RetGoals_Git/Piloting/RetGoals_PilotData.csv')
View(events)
events$learn_remember_perf <- events$corr
events$learn_remember_perf[events$task == 'Encoding'] <- events$encret_corr[events$task == 'Encoding']
summary_stats <-
events %>%
group_by(task) %>%
summarize(performance = mean(learn_remember_perf) %>%
ungroup()
summary_stats <-
events %>%
group_by(task) %>%
summarize(performance = mean(learn_remember_perf)) %>%
ungroup()
View(summary_stats)
trial_perf_10 <-
events %>%
subset(block_type == 40) %>%
group_by(task, trial_num) %>%
summarize(performance = mean(learn_remember_perf)) %>%
ungroup()
ggplot(trial_perf_10, aes(x=trial_num, y = performance, color = task)) + geom_line()
trial_perf_10 <-
events %>%
subset(block_type == 10) %>%
group_by(task, trial_num) %>%
summarize(performance = mean(learn_remember_perf)) %>%
ungroup()
ggplot(trial_perf_10, aes(x=trial_num, y = performance, color = task)) + geom_line()
trial_perf_10 <-
events %>%
subset(block_type == 40) %>%
group_by(task, trial_num) %>%
summarize(performance = mean(learn_remember_perf)) %>%
ungroup()
ggplot(trial_perf_10, aes(x=trial_num, y = performance, color = task)) + geom_line()
ggplot(trial_perf_10, aes(x=trial_num, y = performance, color = task)) + stat_smooth()
ggplot(trial_perf_10, aes(x=trial_num, y = performance, color = task)) + geom_line()
trial_perf_10 <-
events %>%
subset(block_type == 10) %>%
group_by(task, trial_num) %>%
summarize(performance = mean(learn_remember_perf)) %>%
ungroup()
ggplot(trial_perf_10, aes(x=trial_num, y = performance, color = task)) + geom_line()
trial_perf_10 <-
events %>%
subset(block_type == 40) %>%
group_by(task, trial_num) %>%
summarize(performance = mean(learn_remember_perf)) %>%
ungroup()
ggplot(trial_perf_10, aes(x=trial_num, y = performance, color = task)) + geom_line()
